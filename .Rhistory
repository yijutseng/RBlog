new_data = DM_test)%>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
roc_curve(truth = diabetes,
.pred_class,
na_rm = TRUE) %>%
autoplot()
lr_pred %>%
roc_curve(truth = diabetes,
.pred_class,
na_rm = TRUE) %>%
autoplot()
lr_pred <- predict(lr_fit,
new_data = DM_test,
type = "prob")%>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
install.packages("vip")
?initial_split
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_rose(diabetes)%>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
set.seed(345)
folds <- vfold_cv(DM_train, v = 10)
folds
tree_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc)
)
install.packages("ranger")
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc)
)
rf_wflow %>%
fit_resamples(folds)
rf_wflow %>%
fit_resamples(folds)
rf_wflow %>%
fit_resamples(folds)
tune_grid(
resamples = folds,
grid = 25,
control = control_resamples(save_pred = TRUE),
metrics = metric_set(roc_auc)
)
rf_res <- fit_resamples(
diabetes ~ .,
rf_mod,
folds,
control = control_resamples(save_pred = TRUE)
)
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidymodels)
library(themis)
library(vip)
library(mlbench)
data("PimaIndiansDiabetes2")
glimpse(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2))
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
DM_train %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
DM_test %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_rose(diabetes)%>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
lr_mod <-
logistic_reg() %>%
set_engine("glm")
lr_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(gen_recipe)
lr_wflow
lr_fit <-
lr_wflow %>%
fit(data=DM_train)
lr_fit %>%
pull_workflow_fit() %>%
tidy()
lr_pred <- lr_fit %>%
predict(DM_test)
lr_pred
lr_pred <- lr_fit %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
accuracy(truth = diabetes,
.pred_class)
lr_pred <- lr_fit %>%
predict(DM_test,
type = "prob")%>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
roc_curve(truth = diabetes,
.pred_pos) %>%
autoplot()
lr_pred %>%
roc_auc(truth = diabetes,
.pred_pos)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger", num.threads = cores) %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
set.seed(345)
folds <- vfold_cv(DM_train, v = 10,strata = diabetes)
folds
rf_res <- fit_resamples(
diabetes ~ .,
rf_mod,
folds,
control = control_resamples(save_pred = TRUE)
)
rf_res$.notes[[1]]$.notes
?fit_resamples
rf_wflow %>%
fit_resamples(folds)
tune_grid(
resamples = folds,
grid = 25,
control = control_resamples(save_pred = TRUE),
metrics = metric_set(roc_auc)
)
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
control = control_resamples(save_pred = TRUE),
metrics = metric_set(roc_auc)
)
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
metrics = metric_set(roc_auc)
)
plan(multiprocess, workers = 6)
all_cores <- parallel::detectCores(logical = FALSE)
library(doParallel)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
all_cores
?set_engine
all_cores <- parallel::detectCores(logical = FALSE)
library(doParallel)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
set.seed(345)
folds <- vfold_cv(DM_train, v = 10,strata = diabetes)
folds
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
rf_res$.notes
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res$.notes[[1]]$.notes
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidymodels)
library(themis)
library(vip)
library(mlbench)
data("PimaIndiansDiabetes2")
glimpse(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2))
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
DM_train %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
DM_test %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
lr_mod <-
logistic_reg() %>%
set_engine("glm")
lr_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(gen_recipe)
lr_wflow
lr_fit <-
lr_wflow %>%
fit(data=DM_train)
lr_fit %>%
pull_workflow_fit() %>%
tidy()
lr_pred <- lr_fit %>%
predict(DM_test)
lr_pred
lr_pred <- lr_fit %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
accuracy(truth = diabetes,
.pred_class)
lr_pred <- lr_fit %>%
predict(DM_test,
type = "prob")%>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
roc_curve(truth = diabetes,
.pred_pos) %>%
autoplot()
lr_pred %>%
roc_auc(truth = diabetes,
.pred_pos)
all_cores <- parallel::detectCores(logical = FALSE)
library(doParallel)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
set.seed(345)
folds <- vfold_cv(DM_train, v = 10,strata = diabetes)
folds
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 25,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size = 1.5, alpha = 0.6) +
geom_point(size = 2) +
facet_wrap(~ .metric, scales = "free", nrow = 2) +
scale_x_log10(labels = scales::label_number()) +
scale_color_viridis_d(option = "plasma", begin = .9, end = 0)
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 50,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size = 1.5, alpha = 0.6) +
geom_point(size = 2) +
facet_wrap(~ .metric, scales = "free", nrow = 2) +
scale_x_log10(labels = scales::label_number()) +
scale_color_viridis_d(option = "plasma", begin = .9, end = 0)
rf_res
rf_res$.metrics
rf_res$.metrics[[1]]
tune_grid(
resamples = folds,
grid = 50,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
control_resamples(save_pred = TRUE)
rf_res %>%
show_best("roc_auc")
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidymodels)
library(themis)
library(vip)
library(mlbench)
data("PimaIndiansDiabetes2")
glimpse(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
PimaIndiansDiabetes2<-
PimaIndiansDiabetes2 %>%
filter(complete.cases(PimaIndiansDiabetes2))
PimaIndiansDiabetes2 %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
knitr::include_graphics("https://cdn.jamanetwork.com/ama/content_public/journal/jama/938259/jug190001f2.png?Expires=2147483647&Signature=cU6lP2ZYSdn9MyOakMWobXQF2h6LSPCExTP1q7x74zRH7gDgkRSqshXWADmcQUz0XJVK~aVPK3cb-~shWQ6vd6EF4FwIcR8NBXMlGq1sLDR5dXLwpb~qoEYzXvg03zCz2l0AHmdlFxy4IGYGG3ilBfuPh1SCweskxtaUfsWqGsUcwc6FNo3KjaR9j58eJeZOnBEr6a2OF2m~XlEOnT1W3vaYn2-fuGZLAQR88XcUGWp1LYgc6GnDTO1s7zj5m9mYhlL-CeOaLXQNGrSl6fAvw6LisZW-f2tChvIaDfCd4vuuNw-Q1V6sjm-jgUehMt8wjrc61YW6WqyIC9mF6VGzzg__&Key-Pair-Id=APKAIE5G5CRDK6RD3PGA")
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
prop=(3/4),
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
DM_train %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
DM_test %>%
count(diabetes) %>%
mutate(prop = n/sum(n))
gen_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
summary(gen_recipe)
lr_mod <-
logistic_reg() %>%
set_engine("glm")
lr_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(gen_recipe)
lr_wflow
lr_fit <-
lr_wflow %>%
fit(data=DM_train)
lr_fit %>%
pull_workflow_fit() %>%
tidy()
lr_pred <- lr_fit %>%
predict(DM_test)
lr_pred
lr_pred <- lr_fit %>%
predict(DM_test) %>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
accuracy(truth = diabetes,
.pred_class)
lr_pred <- lr_fit %>%
predict(DM_test,
type = "prob")%>%
bind_cols(DM_test %>% select(diabetes))
lr_pred
lr_pred %>%
roc_curve(truth = diabetes,
.pred_pos) %>%
autoplot()
lr_pred %>%
roc_auc(truth = diabetes,
.pred_pos)
all_cores <- parallel::detectCores(logical = FALSE)
library(doParallel)
cl <- makePSOCKcluster(all_cores)
registerDoParallel(cl)
rf_mod <-
rand_forest(mtry = tune(), min_n = tune(),
trees = 1000) %>%
set_engine("ranger") %>%
set_mode("classification")
rf_mod
rf_wflow <- workflow() %>%
add_model(rf_mod) %>%
add_recipe(gen_recipe)
set.seed(345)
folds <- vfold_cv(DM_train, v = 10,
strata = diabetes)
folds
rf_res <-
rf_wflow %>%
tune_grid(
resamples = folds,
grid = 50,
metrics = metric_set(roc_auc),
control=control_resamples(save_pred = TRUE)
)
rf_res %>%
collect_metrics()
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) +
scale_x_log10(labels = scales::label_number())
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) + geom_line() +
scale_x_log10(labels = scales::label_number())
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size=2) +
scale_x_log10(labels = scales::label_number())
rf_res %>%
collect_metrics() %>%
mutate(mtry = factor(mtry)) %>%
ggplot(aes(min_n, mean, color = mtry)) +
geom_line(size=1) +
scale_x_log10(labels = scales::label_number())
blogdown:::serve_site()
?rand_forest
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(5)
blogdown:::serve_site()
blogdown:::serve_site()
remotes::install_github('yihui/xaringan')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
