blogdown:::new_post_addin()
as.numeric("abc")
library(rvest) ##(爬蟲結果不代表本人意見)
DCardCGU<-"https://www.dcard.tw/f/cgu?latest=true"
DCardContent<-read_html(DCardCGU)
post_title <- DCardContent %>% html_nodes(".PostEntry_unread_2U217") %>% html_text()
post_like<- DCardContent %>% html_nodes(".Like_counter_1enlP") %>% html_text()
DCardCGU_posts <-
data.frame(title = post_title,
likeN=post_like,
stringsAsFactors = F)
View(DCardCGU_posts)
str(DCardCGU_posts)
is.numeric(DCardCGU_posts$likeN)
blogdown:::new_post_addin()
install.packages("jiebaR")
?lung
?survival::lung
?survfit
??survfit
library(survival)
library(survminer)
fit<- survfit(Surv(time, status) ~ sex, data = lung)
# Drawing survival curves
ggsurvplot(fit)
surv_pvalue(fit)
diffKM<-survdiff(survObj~RiskGroup,KMPlotDataSelect)
p<-round(pchisq(diffKM$chisq, length(diffKM$n)-1, lower.tail = FALSE),3)
diff_fit<-survdiff(Surv(time, status) ~ sex, data = lung)
p<-round(pchisq(diff_fit$chisq, length(diff_fit$n)-1, lower.tail = FALSE),3)
p<-pchisq(diff_fit$chisq, length(diff_fit$n)-1, lower.tail = FALSE)
p<-surv_pvalue(fit)$pval
?surv_pvalue
?ggsurvplot
blogdown:::serve_site()
remotes::install_github('rstudio/blogdown')
remotes::install_github('rstudio/blogdown')
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
library(mlbench)
data("BostonHousing")
data("PimaIndiansDiabetes2")
PimaIndiansDiabetes2$diabetes
library(mlbench)
data("BostonHousing")
data("PimaIndiansDiabetes2")
library(tidymodels)
library(tidymodels)
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2, strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
set.seed(234)
val_set <- validation_split(DM_train,
strata = diabetes,
prop = 0.80)
val_set
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 30))
lr_reg_grid %>% head()
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_res
lr_res$.notes
splits
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_reg_grid
val_set
lr_workflow
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_res$.notes[[1]]
lr_res$.notes[[1]]$.notes
lr_mod <-
logistic_reg(penalty = tune(), mixture = 0.5) %>%
set_engine("glmnet")
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 30))
lr_reg_grid %>% head()
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_res$.notes[[1]]
lr_res$.notes[[1]]$.notes
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid)
lr_res <-
lr_workflow %>%
tune_grid(val_set)
val_set
val_set
val_set
val_set$splits
val_set$id
DM_train
DM_train$diabetes
val_set <- validation_split(DM_train,
strata = diabetes,
prop = 0.5)
val_set
lr_reg_grid
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 10))
lr_reg_grid %>% head()
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
str(DM_train)
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
lr_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_naomit(all_nominal()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
lr_mod <-
logistic_reg(penalty = tune(), mixture = 0.5) %>%
set_engine("glmnet")
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 10))
lr_reg_grid %>% head()
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_naomit(all_predictors()) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
lr_mod <-
logistic_reg(penalty = tune(), mixture = 0.5) %>%
set_engine("glmnet")
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 10))
lr_reg_grid %>% head()
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
set_engine("glmnet")
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_res
lr_res$.notes[[1]]$.notes
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_naomit(everything(), skip = TRUE) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
install.packages("scales")
install.packages("scales")
install.packages("scales")
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
lr_plot
---
title: 使用tidymodel建立預測模型
author: Yi-Ju Tseng
date: '2020-05-14'
slug: tidymodel
categories:
- R language
tags:
- R
- Data Mining
---
人工智慧/機器學習/資料探勘正夯，剛好`tidymodels`套件的[官網](https://www.tidymodels.org/)上線了，順勢介紹由`caret`套件的開發者[Max Kuhn](https://twitter.com/topepos)開發的全新建模架構。如同套件名稱，`tidymodels`套件的撰寫邏輯和方法與`tidyverse`套件組合相同，若熟悉`dplyr`、`ggplot`等套件應該蠻好上手
第一次使用前一樣要先安裝
```{r eval=F}
install.packages("tidymodels")
```
安裝後即可載入
```{r}
library(tidymodels)
```
## 建模範例資料
```{r}
library(mlbench)
data("BostonHousing")
data("PimaIndiansDiabetes2")
```
## 訓練組與測試組資料分割
```{r}
set.seed(123)
splits<- initial_split(PimaIndiansDiabetes2,
strata = diabetes)
DM_train<- training(splits)
DM_test<- testing(splits)
```
```{r}
set.seed(234)
val_set <- validation_split(DM_train,
strata = diabetes,
prop = 0.75)
val_set
```
## 建立資料前處理“食譜”
```{r}
lr_recipe <-
recipe(diabetes ~ ., data = DM_train) %>%
step_naomit(everything(), skip = TRUE) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
```
## 決定要用什麼演算法建立模型
```{r}
lr_mod <-
logistic_reg(penalty = tune(), mixture = 0.5) %>%
set_engine("glmnet")
```
## 決定參數調整數列
```{r}
lr_reg_grid <-
tibble(penalty = 10^seq(-4, -1, length.out = 50))
lr_reg_grid %>% head()
```
## 決定
```{r}
lr_workflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(lr_recipe)
lr_res <-
lr_workflow %>%
tune_grid(val_set,
grid = lr_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
```
```{r}
lr_plot <-
lr_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
lr_plot
```
```{r}
top_models <-
lr_res %>%
show_best("roc_auc", n = 15) %>%
arrange(penalty)
top_models
```
```{r}
lr_best <-
lr_res %>%
collect_metrics() %>%
arrange(penalty) %>%
slice(12)
lr_best
```
```{r}
rf_res %>%
collect_predictions()
```
rf_res %>%
collect_predictions()
lr_res %>%
collect_predictions()
```
top_models <-
lr_res %>%
show_best("roc_auc", n = 15) %>%
arrange(penalty)
top_models
lr_auc <-
lr_res %>%
collect_predictions(parameters = lr_best) %>%
roc_curve(diabetes, .pred_pos) %>%
mutate(model = "Logistic Regression")
autoplot(lr_auc)
lr_auc
set.seed(345)
folds <- vfold_cv(DM_train,
v = 10)
folds
set.seed(456)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds)
collect_metrics(lr_fit_rs)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds)
collect_metrics(lr_fit_rs)
lr_fit_rs <-
lr_workflow %>%
add_formula(diabetes ~ .) %>%
fit_resamples(folds)
lr_fit_rs
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds)
lr_fit_rs
lr_fit_rs$.notes
lr_fit_rs$.notes[[1]]
lr_fit_rs$.notes[[1]]$.notes
lr_fit_rs$.notes[[2]]$.notes
folds
lr_fit_rs
set.seed(456)
control <- control_resamples(save_pred = TRUE)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds,control)
lr_fit_rs
collect_metrics(lr_fit_rs)
control <- control_resamples(save_pred = TRUE)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds,control)
folds <- vfold_cv(DM_train,
v = 5)
folds
set.seed(456)
control <-
control_resamples(save_pred = TRUE)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(folds,control)
#control <-
#  control_resamples(save_pred = TRUE)
lr_fit_rs <-
lr_workflow %>%
fit_resamples(resamples = folds)
#control <-
#  control_resamples(save_pred = TRUE)
fit_resamples(
diabetes~.,
model = lr_mod,
resamples = folds)
#control <-
#  control_resamples(save_pred = TRUE)
fit_resamples(
diabetes~.,
recipe= lr_res,
model = lr_mod,
resamples = folds)
lr_recipe_evl <-
recipe(diabetes ~ ., data = PimaIndiansDiabetes2) %>%
step_naomit(everything(), skip = TRUE) %>%
step_dummy(all_nominal(), -all_outcomes()) %>%
step_zv(all_predictors()) %>%
step_normalize(all_predictors())
lr_mod_evl <-
logistic_reg(penalty = 0.01, mixture = 0.5) %>%
set_engine("glmnet")
control <- control_resamples(save_pred = TRUE)
set.seed(456)
spline_res <- fit_resamples(lr_mod_evl, lr_recipe_evl, folds, control = control)
spline_res
spline_res
spline_res %>%
collect_metrics(summarize = TRUE)
lr_mod_evl <-
logistic_reg(penalty = tune(), mixture = 0.5) %>%
set_engine("glmnet")
control <- control_resamples(save_pred = TRUE)
set.seed(456)
spline_res <- fit_resamples(lr_mod_evl, lr_recipe_evl, folds, control = control)
